import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Table from '../components/Table'
import EditableCell from '../components/EditableCell'
import { useState, useEffect } from 'react'
import makeData from '../functions/makeData.js'
import { useColumns } from '../components/context/global'


/*
syntax for useEffect
useEffect( ()=> {}, [])
first param is the function you want to call, or the action you want to take when a change is observed
second parm is a list of components?! that you are tracking the changes in
*/

const Home = () => {
  const { columnHeaders, setcolumnHeaders } = useColumns()
  const [columns, setColumns] = useState([])

  const [isSSR, setSSR] = useState(true) //isSSR is keeping track of whether we are Server Side Rendering or not

  useEffect(() => {
    // set to false, essentially telling it we are in the client
    //the empty [] tells means that as soon as the client is open set isSSR to false
    setSSR(false)
  }, [])

  //rowdata is the array of rowobjects. 
  const [rowdata, setRowData] = useState(() => {
    //if localStorage is not "undefined" (e.i. comes from the client)
    if
      (typeof localStorage !== "undefined") {
      // get the version of the table before refresh (oldState) from the client's local storage
      //if there is there is an oldState parse it and return, else return an empty list
      const oldState = localStorage.getItem("table")
      return oldState ? JSON.parse(oldState) : []
    }
    return [] //return empty list from server side
  })



  //this function converts the words that the user typed into the box in the landing page to the columns used for the table
  //const createColumns = () => {


  useEffect(() => {
    let c = []
    for (let i = 0; i < columnHeaders.length; i++) {
      c.push({
        Header: columnHeaders[i],
        accessor: columnHeaders[i].toLowerCase(),
        Cell: EditableCell
      })
    }
    setColumns(c)
  }, [columnHeaders])



  //   return columns
  // }

  //const columns = createColumns() //we need to pass the words that the user types into the box in the landing page to this function
  // const columns = [
  //   {
  //     Header: "College",
  //     accessor: "college",
  //     Cell: EditableCell,
  //   },
  //   {
  //     Header: "Location",
  //     accessor: "location",
  //     Cell: EditableCell,
  //   },
  //   {
  //     Header: "Psychology Program",
  //     accessor: "psychology_program",
  //     Cell: EditableCell,
  //   },
  //   {
  //     Header: "social-life",
  //     accessor: "social_life",
  //     Cell: EditableCell,
  //   },
  // ]

  const onAddRowClick = (columns) => { //this function creates a new rowObject everytime somone clicks on the button!

    console.log("columns is", columns)
    let rowObject = {}
    for (let i = 0; i < columns.length; i++) {
      rowObject[columns[i].accessor] = ""
    }

    setRowData(
      rowdata.concat(rowObject)
    )
    console.log(rowdata)
    localStorage.setItem("table", JSON.stringify(rowdata))
    /*
    row object looks like the following:
    {
      college: "",
      location: "",
      psychology_program: "",
      social_life: ""
    }
    */
  }

  //FIX THIS, NEED to add a default row on first render

  //this useEffect is listening to changes in rowdata, everytime a change is made to rowdata the updates are saved
  //under the "table" key in the localStorage (this is in the client), update the contents of rowdata
  useEffect(() => {
    console.log(rowdata)
    localStorage.setItem("table", JSON.stringify(rowdata))
  }
    , [rowdata])


  const updateMyData = (rowIndex, columnId, value) => {
    // We also turn on the flag to not reset the page
    //setSkipPageReset(true)
    setRowData(previousState => //a lamda function that takes in the table's previous state
      previousState.map((row, index) => { //loops through that state and if the row are are editing (rowIndex) == index 
        if (index === rowIndex) { // we have found the right row object to edit
          return {
            ...previousState[rowIndex],// this syntax says, keep everything else the same in the row object
            [columnId]: value, //except the value that correspondes to the given columnID, set the data at given columnId to the value typed in
          }
        }
        return row
      })
    )
  }

  // useEffect(
  //   () => {
  //     onAddRowClick(columns)
  //     for (let i = 0; i < columns.length; i++) {
  //       updateMyData(i, columns[i].acessor, " ")
  //       // }
  //     }
  //   }, [])



  return (
    <div className='bg-deep-purple'>
      <div className={styles.container}>
        <div>
          <Head>
            <title>Uni-research-table</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
        </div><main className={styles.main}>
          <div className='display:flex flex-row content-center'>
            <h1 className='text-primary-font font-family:Outfit capitalize font-semibold text-2xl'>University Research Table</h1>
            <div className="container mx-auto">
              <button
                onClick={() => onAddRowClick(columns)} //button click call the onAddRowClick function
                className="bg-light-purple hover:bg-gradient-to-r from-light-purple to-sea-green text-white font-semibold py-1 px-1 rounded"
              >
                Add Row
              </button>
              {
                !isSSR && <div className="flex justify-center mt-8 font-family:Outfit font-semibold">
                  <Table columns={columns} data={rowdata} updateMyData={updateMyData} />
                </div>
              }
            </div>
          </div>
        </main ></div>
    </div>
  )
}

export default Home