import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react'
import Link from 'next/link'
import React from 'react'
import { useColumns } from '../components/context/global'
import { useRouter } from 'next/router'
import VisitedLP from '../components/visitedLP'



export default function Home() {


  const router = useRouter()

  const [isSSR, setSSR] = useState(true) //isSSR is keeping track of whether we are Server Side Rendering or not

  useEffect(() => {
    // set to false, essentially telling it we are in the client
    //the empty [] tells means that as soon as the client is open set isSSR to false
    setSSR(false)
    const storageColumns = localStorage.getItem("columns")
    if (storageColumns != null) {
      console.log("storageColumns.length=", storageColumns.length)
    }
    if (storageColumns != null && storageColumns.length > 16) { //16 is a oddly specific num don't knwo where it is coming from
      console.log("hello")
      router.push("/table-page")
    }
  }, [])

  const [textValue, setTextValue] = useState()
  function handleChange(e) { //onChange event
    setTextValue(e.target.value) // extract the value from the target that triggered an event
  }

  //need to find a way to export columnHeaders so that it can be imported in table-page.js and passed as an
  // argument to the createColumns function
  const { columnHeaders, setcolumnHeaders } = useColumns()



  // useEffect(() => {
  //   if (textValue != null) {
  //     const splitted = textValue.split(',')
  //     setcolumnHeaders(splitted)
  //   }
  // }, [textValue])
  //idea: use the Context idea to export these variables https://dev.to/nazmifeeroz/using-usecontext-and-usestate-hooks-as-a-store-mnm

  useEffect(() => {
    if (columnHeaders.length)
      localStorage.setItem("columns", JSON.stringify(columnHeaders))

  }
    , [columnHeaders])

  const reroute = () => { textValue ? router.push("/table-page") : null }


  //when the "Done" button is clicked split textValue and merge splitted to the current state of ColumnHeaders
  //then reroute
  const handleClick = () => {
    const splitted = textValue.split(',')
    setcolumnHeaders([...columnHeaders, ...splitted])//this is how you merge an array with your current array state using set...
    reroute()

  }

  function handleKeyDown(e) {
    console.log('User pressed: ', e.key)
    if (e.key === 'Enter') {
      handleClick()
    }
  }

  useEffect({
    document.addEventListener('keydown', detectEnter, true)
  }, []
  )

  return (
    < div className={styles.container} >
      <Head>
        <title>Future Criteria</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Enter words that describe your future life:
        </h1>
        <form ref={ref}>
          <input className={styles.input} type="text" size={100} onChange={handleChange} placeholder='criteria for your future' required></input>

          <button type="button" onClick={handleClick} onKeyDown={(e) => handleKeyDown(e)}>Done</button>
        </form>
        {/*add an onClick event here maybe???*/}

        {/* <ul>{lstOfWords?.map((value,index)=>{
                  if (value === ""){
                    return
                  }
                  return <li key={index}>{value}</li>
              })}</ul> */}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div >
  )
}



